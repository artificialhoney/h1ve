---
- name: Install Docker
  hosts: localhost
  remote_user: pi
  become: true
  vars:
    arch_mapping: # Map ansible architecture {{ ansible_architecture }} names to Docker's architecture names
      x86_64: amd64
      aarch64: arm64
  tags:
    - Install
    - Docker
  tasks:
    - name: Update and upgrade all packages to the latest version
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
        cache_valid_time: 3600

    - name: Install required packages
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - software-properties-common

    - name: Create directory for Docker's GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker's official GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/debian/gpg
        keyring: /etc/apt/keyrings/docker.gpg
        state: present

    - name: Print architecture variables
      ansible.builtin.debug:
        msg: 'Architecture: {{ ansible_architecture }}, Codename: {{ ansible_lsb.codename }}'

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ arch_mapping[ansible_architecture] | default(ansible_architecture) }}
          signed-by=/etc/apt/keyrings/docker.gpg]
          https://download.docker.com/linux/debian {{ ansible_lsb.codename }} stable
        filename: docker
        state: present

    - name: Install Docker and related packages
      ansible.builtin.apt:
        name: '{{ item }}'
        state: present
        update_cache: true
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin

    - name: Add Docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add user to Docker group
      ansible.builtin.user:
        name: '{{ ansible_user }}'
        groups: docker
        append: true

    - name: Enable and start Docker services
      ansible.builtin.systemd:
        name: '{{ item }}'
        enabled: true
        state: started
      loop:
        - docker.service
        - containerd.service

- name: Install H1ve
  hosts: localhost
  remote_user: pi
  become: true
  tags:
    - Install
    - H1ve
  vars:
    ansible_common_remote_group: docker
    h1ve_layers:
      - core
      - data
      - db
      - net
  vars_prompt:
    - name: h1ve_data
      prompt: Please enter the H1ve data directory path
      private: false
      default: /srv/h1ve

    - name: h1ve_config
      prompt: Please enter the H1ve config directory path
      private: false
      default: '/home/pi/.h1ve'
  tasks:
    - name: Setup environment
      ansible.builtin.copy:
        content: |
          H1VE_DATA={{ h1ve_data }}
          H1VE_CONFIG={{ h1ve_config }}
        dest: '{{ playbook_dir }}/.env'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: '0644'

    - name: Create network
      community.docker.docker_network:
        name: h1ve

    - name: Generate docker-compose.yml
      include_role:
        name: h1ve
        tasks_from: generate.yml
      loop: '{{ h1ve_layers }}'
      loop_control:
        loop_var: layer_name

    - name: Start H1ve
      community.docker.docker_compose_v2:
        project_src: '{{ playbook_dir }}/src/{{ item }}'
        env_files:
          - '{{ playbook_dir }}/src/{{ item }}/layer.env'
          - '{{ playbook_dir }}/.env'
      loop: '{{ h1ve_layers }}'
      register: output
